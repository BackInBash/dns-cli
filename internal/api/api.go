// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for DomainRRSetState.
const (
	DomainRRSetStateCREATEFAILED    DomainRRSetState = "CREATE_FAILED"
	DomainRRSetStateCREATESUCCEEDED DomainRRSetState = "CREATE_SUCCEEDED"
	DomainRRSetStateCREATING        DomainRRSetState = "CREATING"
	DomainRRSetStateDELETEFAILED    DomainRRSetState = "DELETE_FAILED"
	DomainRRSetStateDELETESUCCEEDED DomainRRSetState = "DELETE_SUCCEEDED"
	DomainRRSetStateDELETING        DomainRRSetState = "DELETING"
	DomainRRSetStateUPDATEFAILED    DomainRRSetState = "UPDATE_FAILED"
	DomainRRSetStateUPDATESUCCEEDED DomainRRSetState = "UPDATE_SUCCEEDED"
	DomainRRSetStateUPDATING        DomainRRSetState = "UPDATING"
)

// Defines values for DomainRRSetType.
const (
	DomainRRSetTypeA     DomainRRSetType = "A"
	DomainRRSetTypeAAAA  DomainRRSetType = "AAAA"
	DomainRRSetTypeALIAS DomainRRSetType = "ALIAS"
	DomainRRSetTypeCAA   DomainRRSetType = "CAA"
	DomainRRSetTypeCNAME DomainRRSetType = "CNAME"
	DomainRRSetTypeDNAME DomainRRSetType = "DNAME"
	DomainRRSetTypeMX    DomainRRSetType = "MX"
	DomainRRSetTypeNS    DomainRRSetType = "NS"
	DomainRRSetTypePTR   DomainRRSetType = "PTR"
	DomainRRSetTypeSOA   DomainRRSetType = "SOA"
	DomainRRSetTypeSRV   DomainRRSetType = "SRV"
	DomainRRSetTypeTXT   DomainRRSetType = "TXT"
)

// Defines values for DomainZoneState.
const (
	DomainZoneStateCREATEFAILED    DomainZoneState = "CREATE_FAILED"
	DomainZoneStateCREATESUCCEEDED DomainZoneState = "CREATE_SUCCEEDED"
	DomainZoneStateCREATING        DomainZoneState = "CREATING"
	DomainZoneStateDELETEFAILED    DomainZoneState = "DELETE_FAILED"
	DomainZoneStateDELETESUCCEEDED DomainZoneState = "DELETE_SUCCEEDED"
	DomainZoneStateDELETING        DomainZoneState = "DELETING"
	DomainZoneStateUPDATEFAILED    DomainZoneState = "UPDATE_FAILED"
	DomainZoneStateUPDATESUCCEEDED DomainZoneState = "UPDATE_SUCCEEDED"
	DomainZoneStateUPDATING        DomainZoneState = "UPDATING"
)

// Defines values for DomainZoneType.
const (
	DomainZoneTypePrimary   DomainZoneType = "primary"
	DomainZoneTypeSecondary DomainZoneType = "secondary"
)

// Defines values for DomainZoneVisibility.
const (
	Public DomainZoneVisibility = "public"
)

// Defines values for RrsetRRSetPostType.
const (
	RrsetRRSetPostTypeA     RrsetRRSetPostType = "A"
	RrsetRRSetPostTypeAAAA  RrsetRRSetPostType = "AAAA"
	RrsetRRSetPostTypeALIAS RrsetRRSetPostType = "ALIAS"
	RrsetRRSetPostTypeCAA   RrsetRRSetPostType = "CAA"
	RrsetRRSetPostTypeCNAME RrsetRRSetPostType = "CNAME"
	RrsetRRSetPostTypeDNAME RrsetRRSetPostType = "DNAME"
	RrsetRRSetPostTypeMX    RrsetRRSetPostType = "MX"
	RrsetRRSetPostTypeNS    RrsetRRSetPostType = "NS"
	RrsetRRSetPostTypePTR   RrsetRRSetPostType = "PTR"
	RrsetRRSetPostTypeSOA   RrsetRRSetPostType = "SOA"
	RrsetRRSetPostTypeSRV   RrsetRRSetPostType = "SRV"
	RrsetRRSetPostTypeTXT   RrsetRRSetPostType = "TXT"
)

// Defines values for RrsetRecordPatchAction.
const (
	Add    RrsetRecordPatchAction = "add"
	Delete RrsetRecordPatchAction = "delete"
)

// Defines values for ZoneZonePostType.
const (
	ZoneZonePostTypePrimary   ZoneZonePostType = "primary"
	ZoneZonePostTypeSecondary ZoneZonePostType = "secondary"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsTypeEq.
const (
	Primary   GetV1ProjectsProjectIdZonesParamsTypeEq = "primary"
	Secondary GetV1ProjectsProjectIdZonesParamsTypeEq = "secondary"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsStateEq.
const (
	GetV1ProjectsProjectIdZonesParamsStateEqCREATEFAILED    GetV1ProjectsProjectIdZonesParamsStateEq = "CREATE_FAILED"
	GetV1ProjectsProjectIdZonesParamsStateEqCREATESUCCEEDED GetV1ProjectsProjectIdZonesParamsStateEq = "CREATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesParamsStateEqCREATING        GetV1ProjectsProjectIdZonesParamsStateEq = "CREATING"
	GetV1ProjectsProjectIdZonesParamsStateEqDELETEFAILED    GetV1ProjectsProjectIdZonesParamsStateEq = "DELETE_FAILED"
	GetV1ProjectsProjectIdZonesParamsStateEqDELETESUCCEEDED GetV1ProjectsProjectIdZonesParamsStateEq = "DELETE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesParamsStateEqDELETING        GetV1ProjectsProjectIdZonesParamsStateEq = "DELETING"
	GetV1ProjectsProjectIdZonesParamsStateEqUPDATEFAILED    GetV1ProjectsProjectIdZonesParamsStateEq = "UPDATE_FAILED"
	GetV1ProjectsProjectIdZonesParamsStateEqUPDATESUCCEEDED GetV1ProjectsProjectIdZonesParamsStateEq = "UPDATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesParamsStateEqUPDATING        GetV1ProjectsProjectIdZonesParamsStateEq = "UPDATING"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsStateNeq.
const (
	GetV1ProjectsProjectIdZonesParamsStateNeqCREATEFAILED    GetV1ProjectsProjectIdZonesParamsStateNeq = "CREATE_FAILED"
	GetV1ProjectsProjectIdZonesParamsStateNeqCREATESUCCEEDED GetV1ProjectsProjectIdZonesParamsStateNeq = "CREATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesParamsStateNeqCREATING        GetV1ProjectsProjectIdZonesParamsStateNeq = "CREATING"
	GetV1ProjectsProjectIdZonesParamsStateNeqDELETEFAILED    GetV1ProjectsProjectIdZonesParamsStateNeq = "DELETE_FAILED"
	GetV1ProjectsProjectIdZonesParamsStateNeqDELETESUCCEEDED GetV1ProjectsProjectIdZonesParamsStateNeq = "DELETE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesParamsStateNeqDELETING        GetV1ProjectsProjectIdZonesParamsStateNeq = "DELETING"
	GetV1ProjectsProjectIdZonesParamsStateNeqUPDATEFAILED    GetV1ProjectsProjectIdZonesParamsStateNeq = "UPDATE_FAILED"
	GetV1ProjectsProjectIdZonesParamsStateNeqUPDATESUCCEEDED GetV1ProjectsProjectIdZonesParamsStateNeq = "UPDATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesParamsStateNeqUPDATING        GetV1ProjectsProjectIdZonesParamsStateNeq = "UPDATING"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByDnsName.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByDnsNameASC  GetV1ProjectsProjectIdZonesParamsOrderByDnsName = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByDnsNameDESC GetV1ProjectsProjectIdZonesParamsOrderByDnsName = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByName.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByNameASC  GetV1ProjectsProjectIdZonesParamsOrderByName = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByNameDESC GetV1ProjectsProjectIdZonesParamsOrderByName = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByRecordCount.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByRecordCountASC  GetV1ProjectsProjectIdZonesParamsOrderByRecordCount = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByRecordCountDESC GetV1ProjectsProjectIdZonesParamsOrderByRecordCount = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByType.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByTypeASC  GetV1ProjectsProjectIdZonesParamsOrderByType = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByTypeDESC GetV1ProjectsProjectIdZonesParamsOrderByType = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByDescription.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByDescriptionASC  GetV1ProjectsProjectIdZonesParamsOrderByDescription = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByDescriptionDESC GetV1ProjectsProjectIdZonesParamsOrderByDescription = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByCreationStarted.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByCreationStartedASC  GetV1ProjectsProjectIdZonesParamsOrderByCreationStarted = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByCreationStartedDESC GetV1ProjectsProjectIdZonesParamsOrderByCreationStarted = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByCreationFinished.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByCreationFinishedASC  GetV1ProjectsProjectIdZonesParamsOrderByCreationFinished = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByCreationFinishedDESC GetV1ProjectsProjectIdZonesParamsOrderByCreationFinished = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByUpdateStarted.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByUpdateStartedASC  GetV1ProjectsProjectIdZonesParamsOrderByUpdateStarted = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByUpdateStartedDESC GetV1ProjectsProjectIdZonesParamsOrderByUpdateStarted = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinished.
const (
	GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinishedASC  GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinished = "ASC"
	GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinishedDESC GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinished = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq.
const (
	A     GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "A"
	AAAA  GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "AAAA"
	ALIAS GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "ALIAS"
	CAA   GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "CAA"
	CNAME GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "CNAME"
	DNAME GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "DNAME"
	MX    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "MX"
	NS    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "NS"
	PTR   GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "PTR"
	SOA   GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "SOA"
	SRV   GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "SRV"
	TXT   GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq = "TXT"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq.
const (
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqCREATEFAILED    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "CREATE_FAILED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqCREATESUCCEEDED GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "CREATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqCREATING        GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "CREATING"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqDELETEFAILED    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "DELETE_FAILED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqDELETESUCCEEDED GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "DELETE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqDELETING        GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "DELETING"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqUPDATEFAILED    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "UPDATE_FAILED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqUPDATESUCCEEDED GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "UPDATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEqUPDATING        GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq = "UPDATING"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq.
const (
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqCREATEFAILED    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "CREATE_FAILED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqCREATESUCCEEDED GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "CREATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqCREATING        GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "CREATING"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqDELETEFAILED    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "DELETE_FAILED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqDELETESUCCEEDED GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "DELETE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqDELETING        GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "DELETING"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqUPDATEFAILED    GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "UPDATE_FAILED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqUPDATESUCCEEDED GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "UPDATE_SUCCEEDED"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeqUPDATING        GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq = "UPDATING"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByName.
const (
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByNameASC  GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByName = "ASC"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByNameDESC GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByName = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStarted.
const (
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStartedASC  GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStarted = "ASC"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStartedDESC GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStarted = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinished.
const (
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinishedASC  GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinished = "ASC"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinishedDESC GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinished = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStarted.
const (
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStartedASC  GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStarted = "ASC"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStartedDESC GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStarted = "DESC"
)

// Defines values for GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinished.
const (
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinishedASC  GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinished = "ASC"
	GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinishedDESC GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinished = "DESC"
)

// DomainRRSet RRSet.
type DomainRRSet struct {
	// Active if the record set is active or not
	Active *bool `json:"active,omitempty"`

	// Comment comment
	Comment *string `json:"comment,omitempty"`

	// CreationFinished when record set creation finished
	CreationFinished string `json:"creationFinished"`

	// CreationStarted when record set creation started
	CreationStarted string `json:"creationStarted"`

	// Error Error shows error in case create/update/delete failed
	Error *string `json:"error,omitempty"`

	// Id rr set id
	Id string `json:"id"`

	// Name name of the record which should be a valid domain according to rfc1035 Section 2.3.4
	Name string `json:"name"`

	// Records records
	Records []DomainRecord `json:"records"`

	// State record set state
	State DomainRRSetState `json:"state"`

	// Ttl time to live
	Ttl int `json:"ttl"`

	// Type record set type
	Type DomainRRSetType `json:"type"`

	// UpdateFinished when record set update/deletion finished
	UpdateFinished string `json:"updateFinished"`

	// UpdateStarted when record set update/deletion started
	UpdateStarted string `json:"updateStarted"`
}

// DomainRRSetState record set state
type DomainRRSetState string

// DomainRRSetType record set type
type DomainRRSetType string

// DomainRecord Record.
type DomainRecord struct {
	// Content content of the record
	Content string `json:"content"`

	// Id rr set id
	Id string `json:"id"`
}

// DomainZone Zone.
type DomainZone struct {
	// Acl access control list
	Acl    string `json:"acl"`
	Active *bool  `json:"active,omitempty"`

	// ContactEmail contact email from soa record
	ContactEmail *string `json:"contactEmail,omitempty"`

	// CreationFinished when zone creation finished
	CreationFinished string `json:"creationFinished"`

	// CreationStarted when zone creation started
	CreationStarted string `json:"creationStarted"`

	// DefaultTTL default time to live
	DefaultTTL int `json:"defaultTTL"`

	// Description description of the zone
	Description *string `json:"description,omitempty"`

	// DnsName zone name
	DnsName string `json:"dnsName"`

	// Error Error shows error in case create/update/delete failed
	Error *string `json:"error,omitempty"`

	// ExpireTime expire time
	ExpireTime int `json:"expireTime"`

	// Id zone id
	Id string `json:"id"`

	// IsReverseZone if the zone is a reverse zone or not
	IsReverseZone *bool `json:"isReverseZone,omitempty"`

	// Name user given name
	Name string `json:"name"`

	// NegativeCache negative caching
	NegativeCache int `json:"negativeCache"`

	// Primaries primary name server for secondary zone
	Primaries *[]string `json:"primaries,omitempty"`

	// PrimaryNameServer primary name server. FQDN
	PrimaryNameServer string `json:"primaryNameServer"`

	// RecordCount record count how many records are in the zone
	RecordCount *int `json:"recordCount,omitempty"`

	// RefreshTime refresh time
	RefreshTime int `json:"refreshTime"`

	// RetryTime retry time
	RetryTime int `json:"retryTime"`

	// SerialNumber serial number
	SerialNumber int `json:"serialNumber"`

	// State zone state
	State DomainZoneState `json:"state"`

	// Type zone type
	Type DomainZoneType `json:"type"`

	// UpdateFinished when zone update/deletion finished
	UpdateFinished string `json:"updateFinished"`

	// UpdateStarted when zone update/deletion started
	UpdateStarted string `json:"updateStarted"`

	// Visibility visibility of the zone
	Visibility DomainZoneVisibility `json:"visibility"`
}

// DomainZoneState zone state
type DomainZoneState string

// DomainZoneType zone type
type DomainZoneType string

// DomainZoneVisibility visibility of the zone
type DomainZoneVisibility string

// RrsetRRSetPatch RRSetPatch for rr patch set info.
type RrsetRRSetPatch struct {
	// Comment user comment
	Comment *string `json:"comment,omitempty"`

	// Name rfc1035 Section 2.3.4
	Name *string `json:"name,omitempty"`

	// Records records
	Records *[]RrsetRecordPost `json:"records,omitempty"`

	// Ttl time to live
	Ttl *int `json:"ttl,omitempty"`
}

// RrsetRRSetPost RRSetPost for rr set info.
type RrsetRRSetPost struct {
	// Comment user comment
	Comment *string `json:"comment,omitempty"`

	// Name name of the record which should be a valid domain according to rfc1035 Section 2.3.4
	Name string `json:"name"`

	// Records records
	Records []RrsetRecordPost `json:"records"`

	// Ttl time to live. If nothing provided we will set the zone ttl.
	Ttl *int `json:"ttl,omitempty"`

	// Type record set type
	Type RrsetRRSetPostType `json:"type"`
}

// RrsetRRSetPostType record set type
type RrsetRRSetPostType string

// RrsetRecordPatch RecordPatch for record patch in record set.
type RrsetRecordPatch struct {
	Action RrsetRecordPatchAction `json:"action"`

	// Records records
	Records []RrsetRecordPost `json:"records"`
}

// RrsetRecordPatchAction defines model for RrsetRecordPatch.Action.
type RrsetRecordPatchAction string

// RrsetRecordPost RecordPost for rr set info.
type RrsetRecordPost struct {
	// Content content of the record
	Content string `json:"content"`
}

// RrsetResponseRRSet ResponseRRSet for rr set info.
type RrsetResponseRRSet struct {
	Message *string `json:"message,omitempty"`

	// Rrset RRSet.
	Rrset DomainRRSet `json:"rrset"`
}

// RrsetResponseRRSetAll ResponseRRSetAll.
type RrsetResponseRRSetAll struct {
	ItemsPerPage int           `json:"itemsPerPage"`
	Message      *string       `json:"message,omitempty"`
	RrSets       []DomainRRSet `json:"rrSets"`
	TotalItems   int           `json:"totalItems"`
	TotalPages   int           `json:"totalPages"`
}

// SerializerMessage defines model for serializer.Message.
type SerializerMessage struct {
	Message *string `json:"message,omitempty"`
}

// ZoneResponseZone ResponseZone for user info.
type ZoneResponseZone struct {
	Message *string `json:"message,omitempty"`

	// Zone Zone.
	Zone DomainZone `json:"zone"`
}

// ZoneResponseZoneAll ResponseZoneAll for filtered zones.
type ZoneResponseZoneAll struct {
	ItemsPerPage int          `json:"itemsPerPage"`
	Message      *string      `json:"message,omitempty"`
	TotalItems   int          `json:"totalItems"`
	TotalPages   int          `json:"totalPages"`
	Zones        []DomainZone `json:"zones"`
}

// ZoneZonePatch defines model for zone.ZonePatch.
type ZoneZonePatch struct {
	// Acl access control list
	Acl *string `json:"acl,omitempty"`

	// ContactEmail contact e-mail for the zone
	ContactEmail *string `json:"contactEmail,omitempty"`

	// DefaultTTL default time to live
	DefaultTTL *int `json:"defaultTTL,omitempty"`

	// Description description of the zone
	Description *string `json:"description,omitempty"`

	// ExpireTime expire time
	ExpireTime *int `json:"expireTime,omitempty"`

	// Name user given name
	Name *string `json:"name,omitempty"`

	// NegativeCache negative caching
	NegativeCache *int `json:"negativeCache,omitempty"`

	// Primaries primary name server for secondary zone
	Primaries *[]string `json:"primaries,omitempty"`

	// RefreshTime refresh time
	RefreshTime *int `json:"refreshTime,omitempty"`

	// RetryTime retry time
	RetryTime *int `json:"retryTime,omitempty"`
}

// ZoneZonePost Zone to create.
type ZoneZonePost struct {
	// Acl access control list
	Acl *string `json:"acl,omitempty"`

	// ContactEmail contact e-mail for the zone
	ContactEmail *string `json:"contactEmail,omitempty"`

	// DefaultTTL default time to live
	DefaultTTL *int `json:"defaultTTL,omitempty"`

	// Description description of the zone
	Description *string `json:"description,omitempty"`

	// DnsName zone name
	DnsName string `json:"dnsName"`

	// ExpireTime expire time
	ExpireTime *int `json:"expireTime,omitempty"`

	// IsReverseZone if the zone is a reverse zone or not
	IsReverseZone *bool `json:"isReverseZone,omitempty"`

	// Name user given name
	Name string `json:"name"`

	// NegativeCache negative caching
	NegativeCache *int `json:"negativeCache,omitempty"`

	// Primaries primary name server for secondary zone
	Primaries *[]string `json:"primaries,omitempty"`

	// RefreshTime refresh time
	RefreshTime *int `json:"refreshTime,omitempty"`

	// RetryTime retry time
	RetryTime *int `json:"retryTime,omitempty"`

	// Type zone type
	Type *ZoneZonePostType `json:"type,omitempty"`
}

// ZoneZonePostType zone type
type ZoneZonePostType string

// GetV1ProjectsProjectIdZonesParams defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParams struct {
	// Page page
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize page size
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// DnsNameEq filter dns name equal
	DnsNameEq *string `form:"dnsName[eq],omitempty" json:"dnsName[eq],omitempty"`

	// DnsNameLike filter dns name like
	DnsNameLike *string `form:"dnsName[like],omitempty" json:"dnsName[like],omitempty"`

	// TypeEq filter type
	TypeEq *GetV1ProjectsProjectIdZonesParamsTypeEq `form:"type[eq],omitempty" json:"type[eq],omitempty"`

	// StateEq filter state
	StateEq *GetV1ProjectsProjectIdZonesParamsStateEq `form:"state[eq],omitempty" json:"state[eq],omitempty"`

	// StateNeq filter state
	StateNeq *GetV1ProjectsProjectIdZonesParamsStateNeq `form:"state[neq],omitempty" json:"state[neq],omitempty"`

	// PrimaryNameServerEq filter primary name server equal
	PrimaryNameServerEq *string `form:"primaryNameServer[eq],omitempty" json:"primaryNameServer[eq],omitempty"`

	// PrimaryNameServerLike filter primary name server like
	PrimaryNameServerLike *string `form:"primaryNameServer[like],omitempty" json:"primaryNameServer[like],omitempty"`

	// IsReverseZoneEq filter reverse zone equal
	IsReverseZoneEq *bool `form:"isReverseZone[eq],omitempty" json:"isReverseZone[eq],omitempty"`

	// ActiveEq filter active equal
	ActiveEq *bool `form:"active[eq],omitempty" json:"active[eq],omitempty"`

	// CreationStartedGt filter creation started greater with utc timestamp
	CreationStartedGt *string `form:"creationStarted[gt],omitempty" json:"creationStarted[gt],omitempty"`

	// CreationStartedLt filter creation started lesser with utc timestamp
	CreationStartedLt *string `form:"creationStarted[lt],omitempty" json:"creationStarted[lt],omitempty"`

	// CreationStartedGte filter creation started greater equal with utc timestamp
	CreationStartedGte *string `form:"creationStarted[gte],omitempty" json:"creationStarted[gte],omitempty"`

	// CreationStartedLte filter creation started lesser equal with utc timestamp
	CreationStartedLte *string `form:"creationStarted[lte],omitempty" json:"creationStarted[lte],omitempty"`

	// CreationFinishedGt filter creation finished greater with utc timestamp
	CreationFinishedGt *string `form:"creationFinished[gt],omitempty" json:"creationFinished[gt],omitempty"`

	// CreationFinishedLt filter creation finished lesser with utc timestamp
	CreationFinishedLt *string `form:"creationFinished[lt],omitempty" json:"creationFinished[lt],omitempty"`

	// CreationFinishedGte filter creation finished greater equal with utc timestamp
	CreationFinishedGte *string `form:"creationFinished[gte],omitempty" json:"creationFinished[gte],omitempty"`

	// CreationFinishedLte filter creation finished lesser equal with utc timestamp
	CreationFinishedLte *string `form:"creationFinished[lte],omitempty" json:"creationFinished[lte],omitempty"`

	// UpdateStartedGt filter update started greater with utc timestamp
	UpdateStartedGt *string `form:"updateStarted[gt],omitempty" json:"updateStarted[gt],omitempty"`

	// UpdateStartedLt filter update started lesser with utc timestamp
	UpdateStartedLt *string `form:"updateStarted[lt],omitempty" json:"updateStarted[lt],omitempty"`

	// UpdateStartedGte filter update started greater equal with utc timestamp
	UpdateStartedGte *string `form:"updateStarted[gte],omitempty" json:"updateStarted[gte],omitempty"`

	// UpdateStartedLte filter update started lesser equal with utc timestamp
	UpdateStartedLte *string `form:"updateStarted[lte],omitempty" json:"updateStarted[lte],omitempty"`

	// UpdateFinishedGt filter update finished greater with utc timestamp
	UpdateFinishedGt *string `form:"updateFinished[gt],omitempty" json:"updateFinished[gt],omitempty"`

	// UpdateFinishedLt filter update finished lesser with utc timestamp
	UpdateFinishedLt *string `form:"updateFinished[lt],omitempty" json:"updateFinished[lt],omitempty"`

	// UpdateFinishedGte filter update finished greater equal with utc timestamp
	UpdateFinishedGte *string `form:"updateFinished[gte],omitempty" json:"updateFinished[gte],omitempty"`

	// UpdateFinishedLte filter update finished lesser equal with utc timestamp
	UpdateFinishedLte *string `form:"updateFinished[lte],omitempty" json:"updateFinished[lte],omitempty"`

	// OrderByDnsName order by dns name
	OrderByDnsName *GetV1ProjectsProjectIdZonesParamsOrderByDnsName `form:"orderBy[dnsName],omitempty" json:"orderBy[dnsName],omitempty"`

	// OrderByName order by name
	OrderByName *GetV1ProjectsProjectIdZonesParamsOrderByName `form:"orderBy[name],omitempty" json:"orderBy[name],omitempty"`

	// OrderByRecordCount order by record count
	OrderByRecordCount *GetV1ProjectsProjectIdZonesParamsOrderByRecordCount `form:"orderBy[recordCount],omitempty" json:"orderBy[recordCount],omitempty"`

	// OrderByType order by type
	OrderByType *GetV1ProjectsProjectIdZonesParamsOrderByType `form:"orderBy[type],omitempty" json:"orderBy[type],omitempty"`

	// OrderByDescription order by description
	OrderByDescription *GetV1ProjectsProjectIdZonesParamsOrderByDescription `form:"orderBy[description],omitempty" json:"orderBy[description],omitempty"`

	// OrderByCreationStarted order by creationStarted
	OrderByCreationStarted *GetV1ProjectsProjectIdZonesParamsOrderByCreationStarted `form:"orderBy[creationStarted],omitempty" json:"orderBy[creationStarted],omitempty"`

	// OrderByCreationFinished order by creationFinished
	OrderByCreationFinished *GetV1ProjectsProjectIdZonesParamsOrderByCreationFinished `form:"orderBy[creationFinished],omitempty" json:"orderBy[creationFinished],omitempty"`

	// OrderByUpdateStarted order by updateStarted
	OrderByUpdateStarted *GetV1ProjectsProjectIdZonesParamsOrderByUpdateStarted `form:"orderBy[updateStarted],omitempty" json:"orderBy[updateStarted],omitempty"`

	// OrderByUpdateFinished order by updateFinished
	OrderByUpdateFinished *GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinished `form:"orderBy[updateFinished],omitempty" json:"orderBy[updateFinished],omitempty"`
}

// GetV1ProjectsProjectIdZonesParamsTypeEq defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsTypeEq string

// GetV1ProjectsProjectIdZonesParamsStateEq defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsStateEq string

// GetV1ProjectsProjectIdZonesParamsStateNeq defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsStateNeq string

// GetV1ProjectsProjectIdZonesParamsOrderByDnsName defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByDnsName string

// GetV1ProjectsProjectIdZonesParamsOrderByName defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByName string

// GetV1ProjectsProjectIdZonesParamsOrderByRecordCount defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByRecordCount string

// GetV1ProjectsProjectIdZonesParamsOrderByType defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByType string

// GetV1ProjectsProjectIdZonesParamsOrderByDescription defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByDescription string

// GetV1ProjectsProjectIdZonesParamsOrderByCreationStarted defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByCreationStarted string

// GetV1ProjectsProjectIdZonesParamsOrderByCreationFinished defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByCreationFinished string

// GetV1ProjectsProjectIdZonesParamsOrderByUpdateStarted defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByUpdateStarted string

// GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinished defines parameters for GetV1ProjectsProjectIdZones.
type GetV1ProjectsProjectIdZonesParamsOrderByUpdateFinished string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParams defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParams struct {
	// Page page
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize page size
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// NameEq filter name equal
	NameEq *string `form:"name[eq],omitempty" json:"name[eq],omitempty"`

	// NameLike filter name like
	NameLike *string `form:"name[like],omitempty" json:"name[like],omitempty"`

	// TypeEq filter type
	TypeEq *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq `form:"type[eq],omitempty" json:"type[eq],omitempty"`

	// StateEq filter state
	StateEq *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq `form:"state[eq],omitempty" json:"state[eq],omitempty"`

	// StateNeq filter state
	StateNeq *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq `form:"state[neq],omitempty" json:"state[neq],omitempty"`

	// ActiveEq filter active equal
	ActiveEq *bool `form:"active[eq],omitempty" json:"active[eq],omitempty"`

	// CreationStartedGt filter creation started greater with utc timestamp
	CreationStartedGt *string `form:"creationStarted[gt],omitempty" json:"creationStarted[gt],omitempty"`

	// CreationStartedLt filter creation started lesser with utc timestamp
	CreationStartedLt *string `form:"creationStarted[lt],omitempty" json:"creationStarted[lt],omitempty"`

	// CreationStartedGte filter creation started greater equal with utc timestamp
	CreationStartedGte *string `form:"creationStarted[gte],omitempty" json:"creationStarted[gte],omitempty"`

	// CreationStartedLte filter creation started lesser equal with utc timestamp
	CreationStartedLte *string `form:"creationStarted[lte],omitempty" json:"creationStarted[lte],omitempty"`

	// CreationFinishedGt filter creation finished greater with utc timestamp
	CreationFinishedGt *string `form:"creationFinished[gt],omitempty" json:"creationFinished[gt],omitempty"`

	// CreationFinishedLt filter creation finished lesser with utc timestamp
	CreationFinishedLt *string `form:"creationFinished[lt],omitempty" json:"creationFinished[lt],omitempty"`

	// CreationFinishedGte filter creation finished greater equal with utc timestamp
	CreationFinishedGte *string `form:"creationFinished[gte],omitempty" json:"creationFinished[gte],omitempty"`

	// CreationFinishedLte filter creation finished lesser equal with utc timestamp
	CreationFinishedLte *string `form:"creationFinished[lte],omitempty" json:"creationFinished[lte],omitempty"`

	// UpdateStartedGt filter update started greater with utc timestamp
	UpdateStartedGt *string `form:"updateStarted[gt],omitempty" json:"updateStarted[gt],omitempty"`

	// UpdateStartedLt filter update started lesser with utc timestamp
	UpdateStartedLt *string `form:"updateStarted[lt],omitempty" json:"updateStarted[lt],omitempty"`

	// UpdateStartedGte filter update started greater equal with utc timestamp
	UpdateStartedGte *string `form:"updateStarted[gte],omitempty" json:"updateStarted[gte],omitempty"`

	// UpdateStartedLte filter update started lesser equal with utc timestamp
	UpdateStartedLte *string `form:"updateStarted[lte],omitempty" json:"updateStarted[lte],omitempty"`

	// UpdateFinishedGt filter update finished greater with utc timestamp
	UpdateFinishedGt *string `form:"updateFinished[gt],omitempty" json:"updateFinished[gt],omitempty"`

	// UpdateFinishedLt filter update finished lesser with utc timestamp
	UpdateFinishedLt *string `form:"updateFinished[lt],omitempty" json:"updateFinished[lt],omitempty"`

	// UpdateFinishedGte filter update finished greater equal with utc timestamp
	UpdateFinishedGte *string `form:"updateFinished[gte],omitempty" json:"updateFinished[gte],omitempty"`

	// UpdateFinishedLte filter update finished lesser equal with utc timestamp
	UpdateFinishedLte *string `form:"updateFinished[lte],omitempty" json:"updateFinished[lte],omitempty"`

	// OrderByName order by name
	OrderByName *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByName `form:"orderBy[name],omitempty" json:"orderBy[name],omitempty"`

	// OrderByCreationStarted order by creationStarted
	OrderByCreationStarted *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStarted `form:"orderBy[creationStarted],omitempty" json:"orderBy[creationStarted],omitempty"`

	// OrderByCreationFinished order by creationFinished
	OrderByCreationFinished *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinished `form:"orderBy[creationFinished],omitempty" json:"orderBy[creationFinished],omitempty"`

	// OrderByUpdateStarted order by updateStarted
	OrderByUpdateStarted *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStarted `form:"orderBy[updateStarted],omitempty" json:"orderBy[updateStarted],omitempty"`

	// OrderByUpdateFinished order by updateFinished
	OrderByUpdateFinished *GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinished `form:"orderBy[updateFinished],omitempty" json:"orderBy[updateFinished],omitempty"`
}

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsTypeEq string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateEq string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsStateNeq string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByName defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByName string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStarted defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationStarted string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinished defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByCreationFinished string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStarted defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateStarted string

// GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinished defines parameters for GetV1ProjectsProjectIdZonesZoneIdRrsets.
type GetV1ProjectsProjectIdZonesZoneIdRrsetsParamsOrderByUpdateFinished string

// PostV1ProjectsProjectIdZonesJSONRequestBody defines body for PostV1ProjectsProjectIdZones for application/json ContentType.
type PostV1ProjectsProjectIdZonesJSONRequestBody = ZoneZonePost

// PatchV1ProjectsProjectIdZonesZoneIdJSONRequestBody defines body for PatchV1ProjectsProjectIdZonesZoneId for application/json ContentType.
type PatchV1ProjectsProjectIdZonesZoneIdJSONRequestBody = ZoneZonePatch

// PostV1ProjectsProjectIdZonesZoneIdRrsetsJSONRequestBody defines body for PostV1ProjectsProjectIdZonesZoneIdRrsets for application/json ContentType.
type PostV1ProjectsProjectIdZonesZoneIdRrsetsJSONRequestBody = RrsetRRSetPost

// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdJSONRequestBody defines body for PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId for application/json ContentType.
type PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdJSONRequestBody = RrsetRRSetPatch

// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsJSONRequestBody defines body for PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords for application/json ContentType.
type PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsJSONRequestBody = RrsetRecordPatch

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1Healthz request
	GetV1Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdZones request
	GetV1ProjectsProjectIdZones(ctx context.Context, projectId string, params *GetV1ProjectsProjectIdZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdZones request with any body
	PostV1ProjectsProjectIdZonesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectIdZones(ctx context.Context, projectId string, body PostV1ProjectsProjectIdZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectIdZonesZoneId request
	DeleteV1ProjectsProjectIdZonesZoneId(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdZonesZoneId request
	GetV1ProjectsProjectIdZonesZoneId(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectIdZonesZoneId request with any body
	PatchV1ProjectsProjectIdZonesZoneIdWithBody(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectIdZonesZoneId(ctx context.Context, projectId string, zoneId string, body PatchV1ProjectsProjectIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdZonesZoneIdRestores request
	PostV1ProjectsProjectIdZonesZoneIdRestores(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdZonesZoneIdRrsets request
	GetV1ProjectsProjectIdZonesZoneIdRrsets(ctx context.Context, projectId string, zoneId string, params *GetV1ProjectsProjectIdZonesZoneIdRrsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdZonesZoneIdRrsets request with any body
	PostV1ProjectsProjectIdZonesZoneIdRrsetsWithBody(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectIdZonesZoneIdRrsets(ctx context.Context, projectId string, zoneId string, body PostV1ProjectsProjectIdZonesZoneIdRrsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId request
	DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId request
	GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId request with any body
	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithBody(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords request with any body
	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithBody(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores request
	PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1HealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdZones(ctx context.Context, projectId string, params *GetV1ProjectsProjectIdZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdZonesRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdZonesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdZonesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdZones(ctx context.Context, projectId string, body PostV1ProjectsProjectIdZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdZonesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectIdZonesZoneId(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectIdZonesZoneIdRequest(c.Server, projectId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdZonesZoneId(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdZonesZoneIdRequest(c.Server, projectId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectIdZonesZoneIdWithBody(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectIdZonesZoneIdRequestWithBody(c.Server, projectId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectIdZonesZoneId(ctx context.Context, projectId string, zoneId string, body PatchV1ProjectsProjectIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectIdZonesZoneIdRequest(c.Server, projectId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdZonesZoneIdRestores(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdZonesZoneIdRestoresRequest(c.Server, projectId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdZonesZoneIdRrsets(ctx context.Context, projectId string, zoneId string, params *GetV1ProjectsProjectIdZonesZoneIdRrsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdZonesZoneIdRrsetsRequest(c.Server, projectId, zoneId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdZonesZoneIdRrsetsWithBody(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRequestWithBody(c.Server, projectId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdZonesZoneIdRrsets(ctx context.Context, projectId string, zoneId string, body PostV1ProjectsProjectIdZonesZoneIdRrsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRequest(c.Server, projectId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest(c.Server, projectId, zoneId, rrSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest(c.Server, projectId, zoneId, rrSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithBody(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequestWithBody(c.Server, projectId, zoneId, rrSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest(c.Server, projectId, zoneId, rrSetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithBody(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsRequestWithBody(c.Server, projectId, zoneId, rrSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsRequest(c.Server, projectId, zoneId, rrSetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresRequest(c.Server, projectId, zoneId, rrSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1HealthzRequest generates requests for GetV1Healthz
func NewGetV1HealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdZonesRequest generates requests for GetV1ProjectsProjectIdZones
func NewGetV1ProjectsProjectIdZonesRequest(server string, projectId string, params *GetV1ProjectsProjectIdZonesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DnsNameEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnsName[eq]", runtime.ParamLocationQuery, *params.DnsNameEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DnsNameLike != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnsName[like]", runtime.ParamLocationQuery, *params.DnsNameLike); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type[eq]", runtime.ParamLocationQuery, *params.TypeEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state[eq]", runtime.ParamLocationQuery, *params.StateEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateNeq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state[neq]", runtime.ParamLocationQuery, *params.StateNeq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PrimaryNameServerEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "primaryNameServer[eq]", runtime.ParamLocationQuery, *params.PrimaryNameServerEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PrimaryNameServerLike != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "primaryNameServer[like]", runtime.ParamLocationQuery, *params.PrimaryNameServerLike); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsReverseZoneEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isReverseZone[eq]", runtime.ParamLocationQuery, *params.IsReverseZoneEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActiveEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active[eq]", runtime.ParamLocationQuery, *params.ActiveEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[gt]", runtime.ParamLocationQuery, *params.CreationStartedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[lt]", runtime.ParamLocationQuery, *params.CreationStartedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[gte]", runtime.ParamLocationQuery, *params.CreationStartedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[lte]", runtime.ParamLocationQuery, *params.CreationStartedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[gt]", runtime.ParamLocationQuery, *params.CreationFinishedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[lt]", runtime.ParamLocationQuery, *params.CreationFinishedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[gte]", runtime.ParamLocationQuery, *params.CreationFinishedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[lte]", runtime.ParamLocationQuery, *params.CreationFinishedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[gt]", runtime.ParamLocationQuery, *params.UpdateStartedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[lt]", runtime.ParamLocationQuery, *params.UpdateStartedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[gte]", runtime.ParamLocationQuery, *params.UpdateStartedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[lte]", runtime.ParamLocationQuery, *params.UpdateStartedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[gt]", runtime.ParamLocationQuery, *params.UpdateFinishedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[lt]", runtime.ParamLocationQuery, *params.UpdateFinishedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[gte]", runtime.ParamLocationQuery, *params.UpdateFinishedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[lte]", runtime.ParamLocationQuery, *params.UpdateFinishedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByDnsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[dnsName]", runtime.ParamLocationQuery, *params.OrderByDnsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[name]", runtime.ParamLocationQuery, *params.OrderByName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByRecordCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[recordCount]", runtime.ParamLocationQuery, *params.OrderByRecordCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[type]", runtime.ParamLocationQuery, *params.OrderByType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByDescription != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[description]", runtime.ParamLocationQuery, *params.OrderByDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByCreationStarted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[creationStarted]", runtime.ParamLocationQuery, *params.OrderByCreationStarted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByCreationFinished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[creationFinished]", runtime.ParamLocationQuery, *params.OrderByCreationFinished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByUpdateStarted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[updateStarted]", runtime.ParamLocationQuery, *params.OrderByUpdateStarted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByUpdateFinished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[updateFinished]", runtime.ParamLocationQuery, *params.OrderByUpdateFinished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectIdZonesRequest calls the generic PostV1ProjectsProjectIdZones builder with application/json body
func NewPostV1ProjectsProjectIdZonesRequest(server string, projectId string, body PostV1ProjectsProjectIdZonesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectIdZonesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectIdZonesRequestWithBody generates requests for PostV1ProjectsProjectIdZones with any type of body
func NewPostV1ProjectsProjectIdZonesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectIdZonesZoneIdRequest generates requests for DeleteV1ProjectsProjectIdZonesZoneId
func NewDeleteV1ProjectsProjectIdZonesZoneIdRequest(server string, projectId string, zoneId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdZonesZoneIdRequest generates requests for GetV1ProjectsProjectIdZonesZoneId
func NewGetV1ProjectsProjectIdZonesZoneIdRequest(server string, projectId string, zoneId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectIdZonesZoneIdRequest calls the generic PatchV1ProjectsProjectIdZonesZoneId builder with application/json body
func NewPatchV1ProjectsProjectIdZonesZoneIdRequest(server string, projectId string, zoneId string, body PatchV1ProjectsProjectIdZonesZoneIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectIdZonesZoneIdRequestWithBody(server, projectId, zoneId, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectIdZonesZoneIdRequestWithBody generates requests for PatchV1ProjectsProjectIdZonesZoneId with any type of body
func NewPatchV1ProjectsProjectIdZonesZoneIdRequestWithBody(server string, projectId string, zoneId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ProjectsProjectIdZonesZoneIdRestoresRequest generates requests for PostV1ProjectsProjectIdZonesZoneIdRestores
func NewPostV1ProjectsProjectIdZonesZoneIdRestoresRequest(server string, projectId string, zoneId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/restores", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdZonesZoneIdRrsetsRequest generates requests for GetV1ProjectsProjectIdZonesZoneIdRrsets
func NewGetV1ProjectsProjectIdZonesZoneIdRrsetsRequest(server string, projectId string, zoneId string, params *GetV1ProjectsProjectIdZonesZoneIdRrsetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/rrsets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name[eq]", runtime.ParamLocationQuery, *params.NameEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameLike != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name[like]", runtime.ParamLocationQuery, *params.NameLike); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type[eq]", runtime.ParamLocationQuery, *params.TypeEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state[eq]", runtime.ParamLocationQuery, *params.StateEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateNeq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state[neq]", runtime.ParamLocationQuery, *params.StateNeq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActiveEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active[eq]", runtime.ParamLocationQuery, *params.ActiveEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[gt]", runtime.ParamLocationQuery, *params.CreationStartedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[lt]", runtime.ParamLocationQuery, *params.CreationStartedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[gte]", runtime.ParamLocationQuery, *params.CreationStartedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationStartedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationStarted[lte]", runtime.ParamLocationQuery, *params.CreationStartedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[gt]", runtime.ParamLocationQuery, *params.CreationFinishedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[lt]", runtime.ParamLocationQuery, *params.CreationFinishedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[gte]", runtime.ParamLocationQuery, *params.CreationFinishedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationFinishedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creationFinished[lte]", runtime.ParamLocationQuery, *params.CreationFinishedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[gt]", runtime.ParamLocationQuery, *params.UpdateStartedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[lt]", runtime.ParamLocationQuery, *params.UpdateStartedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[gte]", runtime.ParamLocationQuery, *params.UpdateStartedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateStartedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateStarted[lte]", runtime.ParamLocationQuery, *params.UpdateStartedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[gt]", runtime.ParamLocationQuery, *params.UpdateFinishedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[lt]", runtime.ParamLocationQuery, *params.UpdateFinishedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[gte]", runtime.ParamLocationQuery, *params.UpdateFinishedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdateFinishedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateFinished[lte]", runtime.ParamLocationQuery, *params.UpdateFinishedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[name]", runtime.ParamLocationQuery, *params.OrderByName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByCreationStarted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[creationStarted]", runtime.ParamLocationQuery, *params.OrderByCreationStarted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByCreationFinished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[creationFinished]", runtime.ParamLocationQuery, *params.OrderByCreationFinished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByUpdateStarted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[updateStarted]", runtime.ParamLocationQuery, *params.OrderByUpdateStarted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByUpdateFinished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy[updateFinished]", runtime.ParamLocationQuery, *params.OrderByUpdateFinished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRequest calls the generic PostV1ProjectsProjectIdZonesZoneIdRrsets builder with application/json body
func NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRequest(server string, projectId string, zoneId string, body PostV1ProjectsProjectIdZonesZoneIdRrsetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRequestWithBody(server, projectId, zoneId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRequestWithBody generates requests for PostV1ProjectsProjectIdZonesZoneIdRrsets with any type of body
func NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRequestWithBody(server string, projectId string, zoneId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/rrsets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest generates requests for DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId
func NewDeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest(server string, projectId string, zoneId string, rrSetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, rrSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/rrsets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest generates requests for GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId
func NewGetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest(server string, projectId string, zoneId string, rrSetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, rrSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/rrsets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest calls the generic PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId builder with application/json body
func NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequest(server string, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequestWithBody(server, projectId, zoneId, rrSetId, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequestWithBody generates requests for PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId with any type of body
func NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRequestWithBody(server string, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, rrSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/rrsets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsRequest calls the generic PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords builder with application/json body
func NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsRequest(server string, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsRequestWithBody(server, projectId, zoneId, rrSetId, "application/json", bodyReader)
}

// NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsRequestWithBody generates requests for PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords with any type of body
func NewPatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsRequestWithBody(server string, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, rrSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/rrsets/%s/records", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresRequest generates requests for PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores
func NewPostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresRequest(server string, projectId string, zoneId string, rrSetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, rrSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/zones/%s/rrsets/%s/restores", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1Healthz request
	GetV1HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1HealthzResponse, error)

	// GetV1ProjectsProjectIdZones request
	GetV1ProjectsProjectIdZonesWithResponse(ctx context.Context, projectId string, params *GetV1ProjectsProjectIdZonesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesResponse, error)

	// PostV1ProjectsProjectIdZones request with any body
	PostV1ProjectsProjectIdZonesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesResponse, error)

	PostV1ProjectsProjectIdZonesWithResponse(ctx context.Context, projectId string, body PostV1ProjectsProjectIdZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesResponse, error)

	// DeleteV1ProjectsProjectIdZonesZoneId request
	DeleteV1ProjectsProjectIdZonesZoneIdWithResponse(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdZonesZoneIdResponse, error)

	// GetV1ProjectsProjectIdZonesZoneId request
	GetV1ProjectsProjectIdZonesZoneIdWithResponse(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesZoneIdResponse, error)

	// PatchV1ProjectsProjectIdZonesZoneId request with any body
	PatchV1ProjectsProjectIdZonesZoneIdWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdResponse, error)

	PatchV1ProjectsProjectIdZonesZoneIdWithResponse(ctx context.Context, projectId string, zoneId string, body PatchV1ProjectsProjectIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdResponse, error)

	// PostV1ProjectsProjectIdZonesZoneIdRestores request
	PostV1ProjectsProjectIdZonesZoneIdRestoresWithResponse(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRestoresResponse, error)

	// GetV1ProjectsProjectIdZonesZoneIdRrsets request
	GetV1ProjectsProjectIdZonesZoneIdRrsetsWithResponse(ctx context.Context, projectId string, zoneId string, params *GetV1ProjectsProjectIdZonesZoneIdRrsetsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error)

	// PostV1ProjectsProjectIdZonesZoneIdRrsets request with any body
	PostV1ProjectsProjectIdZonesZoneIdRrsetsWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error)

	PostV1ProjectsProjectIdZonesZoneIdRrsetsWithResponse(ctx context.Context, projectId string, zoneId string, body PostV1ProjectsProjectIdZonesZoneIdRrsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error)

	// DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId request
	DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error)

	// GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId request
	GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error)

	// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId request with any body
	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error)

	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error)

	// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords request with any body
	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse, error)

	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse, error)

	// PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores request
	PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse, error)
}

type GetV1HealthzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r GetV1HealthzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1HealthzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneResponseZoneAll
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ZoneResponseZone
	JSON400      *SerializerMessage
	JSON404      *SerializerMessage
	JSON409      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectIdZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SerializerMessage
	JSON400      *SerializerMessage
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectIdZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectIdZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneResponseZone
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectIdZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ZoneResponseZone
	JSON400      *SerializerMessage
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectIdZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectIdZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdZonesZoneIdRestoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SerializerMessage
	JSON400      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdZonesZoneIdRestoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdZonesZoneIdRestoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RrsetResponseRRSetAll
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *RrsetResponseRRSet
	JSON400      *SerializerMessage
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SerializerMessage
	JSON400      *SerializerMessage
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RrsetResponseRRSet
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SerializerMessage
	JSON400      *SerializerMessage
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SerializerMessage
	JSON400      *SerializerMessage
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SerializerMessage
	JSON404      *SerializerMessage
	JSON502      *SerializerMessage
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1HealthzWithResponse request returning *GetV1HealthzResponse
func (c *ClientWithResponses) GetV1HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1HealthzResponse, error) {
	rsp, err := c.GetV1Healthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1HealthzResponse(rsp)
}

// GetV1ProjectsProjectIdZonesWithResponse request returning *GetV1ProjectsProjectIdZonesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdZonesWithResponse(ctx context.Context, projectId string, params *GetV1ProjectsProjectIdZonesParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdZones(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdZonesResponse(rsp)
}

// PostV1ProjectsProjectIdZonesWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectIdZonesResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdZonesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdZonesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdZonesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectIdZonesWithResponse(ctx context.Context, projectId string, body PostV1ProjectsProjectIdZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdZones(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdZonesResponse(rsp)
}

// DeleteV1ProjectsProjectIdZonesZoneIdWithResponse request returning *DeleteV1ProjectsProjectIdZonesZoneIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectIdZonesZoneIdWithResponse(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdZonesZoneIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectIdZonesZoneId(ctx, projectId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectIdZonesZoneIdResponse(rsp)
}

// GetV1ProjectsProjectIdZonesZoneIdWithResponse request returning *GetV1ProjectsProjectIdZonesZoneIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdZonesZoneIdWithResponse(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesZoneIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdZonesZoneId(ctx, projectId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdZonesZoneIdResponse(rsp)
}

// PatchV1ProjectsProjectIdZonesZoneIdWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectIdZonesZoneIdResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectIdZonesZoneIdWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectIdZonesZoneIdWithBody(ctx, projectId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectIdZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectIdZonesZoneIdWithResponse(ctx context.Context, projectId string, zoneId string, body PatchV1ProjectsProjectIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectIdZonesZoneId(ctx, projectId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectIdZonesZoneIdResponse(rsp)
}

// PostV1ProjectsProjectIdZonesZoneIdRestoresWithResponse request returning *PostV1ProjectsProjectIdZonesZoneIdRestoresResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdZonesZoneIdRestoresWithResponse(ctx context.Context, projectId string, zoneId string, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRestoresResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdZonesZoneIdRestores(ctx, projectId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdZonesZoneIdRestoresResponse(rsp)
}

// GetV1ProjectsProjectIdZonesZoneIdRrsetsWithResponse request returning *GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdZonesZoneIdRrsetsWithResponse(ctx context.Context, projectId string, zoneId string, params *GetV1ProjectsProjectIdZonesZoneIdRrsetsParams, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdZonesZoneIdRrsets(ctx, projectId, zoneId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdZonesZoneIdRrsetsResponse(rsp)
}

// PostV1ProjectsProjectIdZonesZoneIdRrsetsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdZonesZoneIdRrsetsWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdZonesZoneIdRrsetsWithBody(ctx, projectId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdZonesZoneIdRrsetsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectIdZonesZoneIdRrsetsWithResponse(ctx context.Context, projectId string, zoneId string, body PostV1ProjectsProjectIdZonesZoneIdRrsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdZonesZoneIdRrsets(ctx, projectId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdZonesZoneIdRrsetsResponse(rsp)
}

// DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse request returning *DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx, projectId, zoneId, rrSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse(rsp)
}

// GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse request returning *GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx, projectId, zoneId, rrSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse(rsp)
}

// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithBody(ctx, projectId, zoneId, rrSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx, projectId, zoneId, rrSetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse(rsp)
}

// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithBodyWithResponse request with arbitrary body returning *PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse
func (c *ClientWithResponses) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithBodyWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithBody(ctx, projectId, zoneId, rrSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, body PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse, error) {
	rsp, err := c.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords(ctx, projectId, zoneId, rrSetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse(rsp)
}

// PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresWithResponse request returning *PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresWithResponse(ctx context.Context, projectId string, zoneId string, rrSetId string, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores(ctx, projectId, zoneId, rrSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse(rsp)
}

// ParseGetV1HealthzResponse parses an HTTP response from a GetV1HealthzWithResponse call
func ParseGetV1HealthzResponse(rsp *http.Response) (*GetV1HealthzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1HealthzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdZonesResponse parses an HTTP response from a GetV1ProjectsProjectIdZonesWithResponse call
func ParseGetV1ProjectsProjectIdZonesResponse(rsp *http.Response) (*GetV1ProjectsProjectIdZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneResponseZoneAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdZonesResponse parses an HTTP response from a PostV1ProjectsProjectIdZonesWithResponse call
func ParsePostV1ProjectsProjectIdZonesResponse(rsp *http.Response) (*PostV1ProjectsProjectIdZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ZoneResponseZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectIdZonesZoneIdResponse parses an HTTP response from a DeleteV1ProjectsProjectIdZonesZoneIdWithResponse call
func ParseDeleteV1ProjectsProjectIdZonesZoneIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectIdZonesZoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectIdZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdZonesZoneIdResponse parses an HTTP response from a GetV1ProjectsProjectIdZonesZoneIdWithResponse call
func ParseGetV1ProjectsProjectIdZonesZoneIdResponse(rsp *http.Response) (*GetV1ProjectsProjectIdZonesZoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneResponseZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectIdZonesZoneIdResponse parses an HTTP response from a PatchV1ProjectsProjectIdZonesZoneIdWithResponse call
func ParsePatchV1ProjectsProjectIdZonesZoneIdResponse(rsp *http.Response) (*PatchV1ProjectsProjectIdZonesZoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectIdZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ZoneResponseZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdZonesZoneIdRestoresResponse parses an HTTP response from a PostV1ProjectsProjectIdZonesZoneIdRestoresWithResponse call
func ParsePostV1ProjectsProjectIdZonesZoneIdRestoresResponse(rsp *http.Response) (*PostV1ProjectsProjectIdZonesZoneIdRestoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdZonesZoneIdRestoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdZonesZoneIdRrsetsResponse parses an HTTP response from a GetV1ProjectsProjectIdZonesZoneIdRrsetsWithResponse call
func ParseGetV1ProjectsProjectIdZonesZoneIdRrsetsResponse(rsp *http.Response) (*GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdZonesZoneIdRrsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RrsetResponseRRSetAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdZonesZoneIdRrsetsResponse parses an HTTP response from a PostV1ProjectsProjectIdZonesZoneIdRrsetsWithResponse call
func ParsePostV1ProjectsProjectIdZonesZoneIdRrsetsResponse(rsp *http.Response) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdZonesZoneIdRrsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest RrsetResponseRRSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse parses an HTTP response from a DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse call
func ParseDeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse parses an HTTP response from a GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse call
func ParseGetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse(rsp *http.Response) (*GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RrsetResponseRRSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse parses an HTTP response from a PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdWithResponse call
func ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse(rsp *http.Response) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse parses an HTTP response from a PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsWithResponse call
func ParsePatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse(rsp *http.Response) (*PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse parses an HTTP response from a PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresWithResponse call
func ParsePostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse(rsp *http.Response) (*PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SerializerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health route
	// (GET /v1/healthz)
	GetV1Healthz(ctx echo.Context) error
	// All get selected zones
	// (GET /v1/projects/{projectId}/zones)
	GetV1ProjectsProjectIdZones(ctx echo.Context, projectId string, params GetV1ProjectsProjectIdZonesParams) error
	// Post create a new zone
	// (POST /v1/projects/{projectId}/zones)
	PostV1ProjectsProjectIdZones(ctx echo.Context, projectId string) error
	// Delete a zone
	// (DELETE /v1/projects/{projectId}/zones/{zoneId})
	DeleteV1ProjectsProjectIdZonesZoneId(ctx echo.Context, projectId string, zoneId string) error
	// Get a single zone
	// (GET /v1/projects/{projectId}/zones/{zoneId})
	GetV1ProjectsProjectIdZonesZoneId(ctx echo.Context, projectId string, zoneId string) error
	// Patch update an existing zone
	// (PATCH /v1/projects/{projectId}/zones/{zoneId})
	PatchV1ProjectsProjectIdZonesZoneId(ctx echo.Context, projectId string, zoneId string) error
	// Restore  an inactive zone but will not restore the record sets
	// (POST /v1/projects/{projectId}/zones/{zoneId}/restores)
	PostV1ProjectsProjectIdZonesZoneIdRestores(ctx echo.Context, projectId string, zoneId string) error
	// All get selected RRSets
	// (GET /v1/projects/{projectId}/zones/{zoneId}/rrsets)
	GetV1ProjectsProjectIdZonesZoneIdRrsets(ctx echo.Context, projectId string, zoneId string, params GetV1ProjectsProjectIdZonesZoneIdRrsetsParams) error
	// Post record set
	// (POST /v1/projects/{projectId}/zones/{zoneId}/rrsets)
	PostV1ProjectsProjectIdZonesZoneIdRrsets(ctx echo.Context, projectId string, zoneId string) error
	// Delete a record set
	// (DELETE /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId})
	DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx echo.Context, projectId string, zoneId string, rrSetId string) error
	// Get a single rrset
	// (GET /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId})
	GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx echo.Context, projectId string, zoneId string, rrSetId string) error
	// Patch updates a record set
	// (PATCH /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId})
	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx echo.Context, projectId string, zoneId string, rrSetId string) error
	// PatchRecords updates a record in a rrset
	// (PATCH /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId}/records)
	PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords(ctx echo.Context, projectId string, zoneId string, rrSetId string) error
	// Restore record set
	// (POST /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId}/restores)
	PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores(ctx echo.Context, projectId string, zoneId string, rrSetId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Healthz(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Healthz(ctx)
	return err
}

// GetV1ProjectsProjectIdZones converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdZones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ProjectsProjectIdZonesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "dnsName[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnsName[eq]", ctx.QueryParams(), &params.DnsNameEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dnsName[eq]: %s", err))
	}

	// ------------- Optional query parameter "dnsName[like]" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnsName[like]", ctx.QueryParams(), &params.DnsNameLike)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dnsName[like]: %s", err))
	}

	// ------------- Optional query parameter "type[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "type[eq]", ctx.QueryParams(), &params.TypeEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type[eq]: %s", err))
	}

	// ------------- Optional query parameter "state[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "state[eq]", ctx.QueryParams(), &params.StateEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state[eq]: %s", err))
	}

	// ------------- Optional query parameter "state[neq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "state[neq]", ctx.QueryParams(), &params.StateNeq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state[neq]: %s", err))
	}

	// ------------- Optional query parameter "primaryNameServer[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "primaryNameServer[eq]", ctx.QueryParams(), &params.PrimaryNameServerEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter primaryNameServer[eq]: %s", err))
	}

	// ------------- Optional query parameter "primaryNameServer[like]" -------------

	err = runtime.BindQueryParameter("form", true, false, "primaryNameServer[like]", ctx.QueryParams(), &params.PrimaryNameServerLike)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter primaryNameServer[like]: %s", err))
	}

	// ------------- Optional query parameter "isReverseZone[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "isReverseZone[eq]", ctx.QueryParams(), &params.IsReverseZoneEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isReverseZone[eq]: %s", err))
	}

	// ------------- Optional query parameter "active[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "active[eq]", ctx.QueryParams(), &params.ActiveEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active[eq]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[gt]", ctx.QueryParams(), &params.CreationStartedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[gt]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[lt]", ctx.QueryParams(), &params.CreationStartedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[lt]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[gte]", ctx.QueryParams(), &params.CreationStartedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[gte]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[lte]", ctx.QueryParams(), &params.CreationStartedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[lte]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[gt]", ctx.QueryParams(), &params.CreationFinishedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[gt]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[lt]", ctx.QueryParams(), &params.CreationFinishedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[lt]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[gte]", ctx.QueryParams(), &params.CreationFinishedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[gte]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[lte]", ctx.QueryParams(), &params.CreationFinishedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[lte]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[gt]", ctx.QueryParams(), &params.UpdateStartedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[gt]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[lt]", ctx.QueryParams(), &params.UpdateStartedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[lt]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[gte]", ctx.QueryParams(), &params.UpdateStartedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[gte]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[lte]", ctx.QueryParams(), &params.UpdateStartedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[lte]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[gt]", ctx.QueryParams(), &params.UpdateFinishedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[gt]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[lt]", ctx.QueryParams(), &params.UpdateFinishedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[lt]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[gte]", ctx.QueryParams(), &params.UpdateFinishedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[gte]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[lte]", ctx.QueryParams(), &params.UpdateFinishedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[lte]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[dnsName]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[dnsName]", ctx.QueryParams(), &params.OrderByDnsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[dnsName]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[name]", ctx.QueryParams(), &params.OrderByName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[name]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[recordCount]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[recordCount]", ctx.QueryParams(), &params.OrderByRecordCount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[recordCount]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[type]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[type]", ctx.QueryParams(), &params.OrderByType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[type]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[description]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[description]", ctx.QueryParams(), &params.OrderByDescription)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[description]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[creationStarted]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[creationStarted]", ctx.QueryParams(), &params.OrderByCreationStarted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[creationStarted]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[creationFinished]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[creationFinished]", ctx.QueryParams(), &params.OrderByCreationFinished)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[creationFinished]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[updateStarted]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[updateStarted]", ctx.QueryParams(), &params.OrderByUpdateStarted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[updateStarted]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[updateFinished]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[updateFinished]", ctx.QueryParams(), &params.OrderByUpdateFinished)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[updateFinished]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdZones(ctx, projectId, params)
	return err
}

// PostV1ProjectsProjectIdZones converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ProjectsProjectIdZones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ProjectsProjectIdZones(ctx, projectId)
	return err
}

// DeleteV1ProjectsProjectIdZonesZoneId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1ProjectsProjectIdZonesZoneId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteV1ProjectsProjectIdZonesZoneId(ctx, projectId, zoneId)
	return err
}

// GetV1ProjectsProjectIdZonesZoneId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdZonesZoneId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdZonesZoneId(ctx, projectId, zoneId)
	return err
}

// PatchV1ProjectsProjectIdZonesZoneId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchV1ProjectsProjectIdZonesZoneId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchV1ProjectsProjectIdZonesZoneId(ctx, projectId, zoneId)
	return err
}

// PostV1ProjectsProjectIdZonesZoneIdRestores converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ProjectsProjectIdZonesZoneIdRestores(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ProjectsProjectIdZonesZoneIdRestores(ctx, projectId, zoneId)
	return err
}

// GetV1ProjectsProjectIdZonesZoneIdRrsets converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdZonesZoneIdRrsets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ProjectsProjectIdZonesZoneIdRrsetsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "name[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "name[eq]", ctx.QueryParams(), &params.NameEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name[eq]: %s", err))
	}

	// ------------- Optional query parameter "name[like]" -------------

	err = runtime.BindQueryParameter("form", true, false, "name[like]", ctx.QueryParams(), &params.NameLike)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name[like]: %s", err))
	}

	// ------------- Optional query parameter "type[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "type[eq]", ctx.QueryParams(), &params.TypeEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type[eq]: %s", err))
	}

	// ------------- Optional query parameter "state[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "state[eq]", ctx.QueryParams(), &params.StateEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state[eq]: %s", err))
	}

	// ------------- Optional query parameter "state[neq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "state[neq]", ctx.QueryParams(), &params.StateNeq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state[neq]: %s", err))
	}

	// ------------- Optional query parameter "active[eq]" -------------

	err = runtime.BindQueryParameter("form", true, false, "active[eq]", ctx.QueryParams(), &params.ActiveEq)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active[eq]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[gt]", ctx.QueryParams(), &params.CreationStartedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[gt]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[lt]", ctx.QueryParams(), &params.CreationStartedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[lt]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[gte]", ctx.QueryParams(), &params.CreationStartedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[gte]: %s", err))
	}

	// ------------- Optional query parameter "creationStarted[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationStarted[lte]", ctx.QueryParams(), &params.CreationStartedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationStarted[lte]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[gt]", ctx.QueryParams(), &params.CreationFinishedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[gt]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[lt]", ctx.QueryParams(), &params.CreationFinishedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[lt]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[gte]", ctx.QueryParams(), &params.CreationFinishedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[gte]: %s", err))
	}

	// ------------- Optional query parameter "creationFinished[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "creationFinished[lte]", ctx.QueryParams(), &params.CreationFinishedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creationFinished[lte]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[gt]", ctx.QueryParams(), &params.UpdateStartedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[gt]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[lt]", ctx.QueryParams(), &params.UpdateStartedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[lt]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[gte]", ctx.QueryParams(), &params.UpdateStartedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[gte]: %s", err))
	}

	// ------------- Optional query parameter "updateStarted[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateStarted[lte]", ctx.QueryParams(), &params.UpdateStartedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateStarted[lte]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[gt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[gt]", ctx.QueryParams(), &params.UpdateFinishedGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[gt]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[lt]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[lt]", ctx.QueryParams(), &params.UpdateFinishedLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[lt]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[gte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[gte]", ctx.QueryParams(), &params.UpdateFinishedGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[gte]: %s", err))
	}

	// ------------- Optional query parameter "updateFinished[lte]" -------------

	err = runtime.BindQueryParameter("form", true, false, "updateFinished[lte]", ctx.QueryParams(), &params.UpdateFinishedLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateFinished[lte]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[name]", ctx.QueryParams(), &params.OrderByName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[name]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[creationStarted]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[creationStarted]", ctx.QueryParams(), &params.OrderByCreationStarted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[creationStarted]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[creationFinished]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[creationFinished]", ctx.QueryParams(), &params.OrderByCreationFinished)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[creationFinished]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[updateStarted]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[updateStarted]", ctx.QueryParams(), &params.OrderByUpdateStarted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[updateStarted]: %s", err))
	}

	// ------------- Optional query parameter "orderBy[updateFinished]" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy[updateFinished]", ctx.QueryParams(), &params.OrderByUpdateFinished)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy[updateFinished]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdZonesZoneIdRrsets(ctx, projectId, zoneId, params)
	return err
}

// PostV1ProjectsProjectIdZonesZoneIdRrsets converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ProjectsProjectIdZonesZoneIdRrsets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ProjectsProjectIdZonesZoneIdRrsets(ctx, projectId, zoneId)
	return err
}

// DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "rrSetId" -------------
	var rrSetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, ctx.Param("rrSetId"), &rrSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rrSetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx, projectId, zoneId, rrSetId)
	return err
}

// GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "rrSetId" -------------
	var rrSetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, ctx.Param("rrSetId"), &rrSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rrSetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx, projectId, zoneId, rrSetId)
	return err
}

// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "rrSetId" -------------
	var rrSetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, ctx.Param("rrSetId"), &rrSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rrSetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId(ctx, projectId, zoneId, rrSetId)
	return err
}

// PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords converts echo context to params.
func (w *ServerInterfaceWrapper) PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "rrSetId" -------------
	var rrSetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, ctx.Param("rrSetId"), &rrSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rrSetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords(ctx, projectId, zoneId, rrSetId)
	return err
}

// PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "rrSetId" -------------
	var rrSetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rrSetId", runtime.ParamLocationPath, ctx.Param("rrSetId"), &rrSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rrSetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores(ctx, projectId, zoneId, rrSetId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/healthz", wrapper.GetV1Healthz)
	router.GET(baseURL+"/v1/projects/:projectId/zones", wrapper.GetV1ProjectsProjectIdZones)
	router.POST(baseURL+"/v1/projects/:projectId/zones", wrapper.PostV1ProjectsProjectIdZones)
	router.DELETE(baseURL+"/v1/projects/:projectId/zones/:zoneId", wrapper.DeleteV1ProjectsProjectIdZonesZoneId)
	router.GET(baseURL+"/v1/projects/:projectId/zones/:zoneId", wrapper.GetV1ProjectsProjectIdZonesZoneId)
	router.PATCH(baseURL+"/v1/projects/:projectId/zones/:zoneId", wrapper.PatchV1ProjectsProjectIdZonesZoneId)
	router.POST(baseURL+"/v1/projects/:projectId/zones/:zoneId/restores", wrapper.PostV1ProjectsProjectIdZonesZoneIdRestores)
	router.GET(baseURL+"/v1/projects/:projectId/zones/:zoneId/rrsets", wrapper.GetV1ProjectsProjectIdZonesZoneIdRrsets)
	router.POST(baseURL+"/v1/projects/:projectId/zones/:zoneId/rrsets", wrapper.PostV1ProjectsProjectIdZonesZoneIdRrsets)
	router.DELETE(baseURL+"/v1/projects/:projectId/zones/:zoneId/rrsets/:rrSetId", wrapper.DeleteV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId)
	router.GET(baseURL+"/v1/projects/:projectId/zones/:zoneId/rrsets/:rrSetId", wrapper.GetV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId)
	router.PATCH(baseURL+"/v1/projects/:projectId/zones/:zoneId/rrsets/:rrSetId", wrapper.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetId)
	router.PATCH(baseURL+"/v1/projects/:projectId/zones/:zoneId/rrsets/:rrSetId/records", wrapper.PatchV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRecords)
	router.POST(baseURL+"/v1/projects/:projectId/zones/:zoneId/rrsets/:rrSetId/restores", wrapper.PostV1ProjectsProjectIdZonesZoneIdRrsetsRrSetIdRestores)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfVfjNrP/Kjq690+TOMByd/NXU2C33G4pD6F9epbDeY7iKIlav2QlBRY4fPfn6MW2",
	"bMnOm2Gz4LanJJasGY1mfpoZTexHGCTRPIlxzBnsP0IWzHCE5MdxEiESdy4vh5jL75gFlMw5SWLYh/Jy",
	"B3oQf0PRPMSiBwo4ucWwz+kCe2LgCMcc9uHVjDBAGEAgvebBgGIkhvpIYsJmeAz7cN/f39/ze3sHvaue",
	"3/fFf1+MnkOOKK/riClNKOyrvyDCjKEphh4k4p6D/zv0D0ZHB3vvjwK8d9jDH/Y+jPzRXm/8Png3Ohjt",
	"jz4cQQ/GKMJiCDWpTpBEYo4UBwkdM9i/FvKKuZpWr7PfOegcrkXhydt6hBsPMo64YPP48nRwdfqf4R/H",
	"x6enJ6cn0IOch7B/cOT7HuT3c9FpAD24mI8Rx8tlrfotkfSTB+c0mWPKCWbmupd1hEwAn2GgpAcY5lIJ",
	"ZGeQUBAn3NQfpTWa6VGShBjFglamR+Xhc2XKxnCqWoS+fcbxlM9gf//du4wE45TEU0nB0sUyqbsZjs15",
	"pHeASXqLyUSFcCvpZvJemSzTd2xCVZtJmdaptBo2S+4YUBZEYhAghhVV3FW60R3jEHMMJoiEJQbKdmfK",
	"3TcUMmeFOOZMqdKU4tgrmq9FQdlzmYa4CpKCdt7NSDAT01+EYzDCAIFbFJIxUCgIUCB6kXgKeALoJOj5",
	"B+/AEAdyNVIjNkRRxA9DEkcHHoxInH7tOXjO0MYSjW7wIOE4kh3+l+IJ7MP/6eYw3tUY3k0BXN4lBo5I",
	"fKZuzMkiStG9aNSY4qYpl0T18CCOFxHsXyv0OTv/BD0XEOlLHwdnn+X3k9PPp7q3/FjsrS9lvf+4OEnH",
	"lh+LvfUl3fvGlLwLEssClhhZnignERaLGwooM0ZUWBqhbyQS0/6g/5HSVJeOctUmMcdTTCUReaVGnLJD",
	"Lk0B04PBQPwZ/i7+f3w++O0UevB8CD3421/Qg1d/XYnWyz+hBy+uLsUNn88GovlE9z0eDIriGLjmX94N",
	"lsGOaflbg15pi1mX9ubIJy3r64JQQfbaBn0bjyVAaQzxDOtLDUHokSZjCbU80ZuMn2T0Nw64EEXRQG0X",
	"S14v+Vjbuh+lrTsbzt5cZUMRJQtSz+mb8HYokX4JwjWO+7X0yguvpyzZqFmWL0nsMGBx1XJ7Q9iHfkf+",
	"2/W9fr/rQ8/yhmOOAn4aISJ6zxLGI8Q4ph3EO4yj4B/CO0GYLOSCP4N3PMYTtAj51dXnFNNK+Kc9p2RB",
	"gZ4ceBAi8OA4ZueWX1zjcONvc0LxFRG39Pb9D5LaOl44YZf4FlOG1RpMUMhw5ptzzMTixXiKhICPUTAT",
	"dN4LInNKIkSlbl9nCnqTXr8XsxhieoupNRel4MfJQhjDgRiL4gnFbKamoSRGMaf36oL8zjAlKDxfRCMx",
	"ohB8r9c7lC01HrrSN81S0865B28JIyMSEn4vqCxGIQlcLrtjC0RBgBkDQlVpEoKQsKJzbam4Zdh5JLCC",
	"W28ahAt+UMABFs1gQpMIsAS5YGiJJTXl/AtTeFG3v0hwG4fftPwyKd0GmvZ+ClRsotm3dH/RSJNPrgaO",
	"jCXt+fuHrhmngFWmLIWq93Ont17WmOXe+g6FUybulvlRbXKdTSoZPK+/xK5NXMq3odCttAlUJBcURRHw",
	"U9VbXbHTC3oTsYHIHSIuGKZgSm5xbOuL3oHWi+pK+5UVkupmEKBgJm4xF+n9Zitk7IZlcnr3kXMDTG6J",
	"YCIUFgdJPBYtZYss7KdZ/GlNM0Lf0hjTt4NMxz68Amcd8PFfJ+c1JlsRQuvdvCIGC0QrmCV3IELxvd5a",
	"GEAUC1N1gdKBdm2VzJ0iLzgNNmHZaBnhpiBruCM2KU7vLUIb0im6OWVSqhXEqtmgZvpDjkHd+QZpva8n",
	"0+BMAsg5lsL/3B3MTLBILu+wWTwvib54JO+kuo0zY3q3ZYp5W9mtSIWsvOGiXNW1ZVGjcJi91ZIGhr+V",
	"uyKF3bmYWCjuDC6QLOKKafgl4zRyEytlJQrydMXClDLM1RnQBeLBrOIgSLbJDYRSMJdfZDAfT5IOtHMO",
	"FQl9uee6svouZ3CN/L57h/9Bsrh6BeRNFwnjOazk22rDCc0DB2A/LVEOwVmFbiSMp6qx80rxNk4GGtGp",
	"DjibCCdbeKtgTpNbMsZjcIfBHQlDleFO/XPOw86rzqmXNgsrYyy71+CrWokKgM0blRmp6SqUJWay3LYq",
	"FKQReCoSNFZblIg6DY6+h45ZO6wklHOwVF5uzMnaVgGdl89+V2Sj6ybL5knMcFUhhtnsmrKRqU6TCX04",
	"XMhcH9RE2uqNt1O9YeWCM60wsraGgtgIkWrMKofPUmnLSq9GWFHlB2G4ROsHYVhSdIlQF5heyHkJk3Rq",
	"/hBzpRat7r+RyqV2qd/KUgt0STgKdTbySH8ViMBgv2ehYBEyHh3e5/o4qfDlcb1yHYWYDofcmI2LPXN6",
	"j674zUTgwmwzVgtECiO6sFplHsgDpp3fHKIx3Y30U93eY/tJFkURTGSbg/tYwGyV3pCMH1f0hR70kO2J",
	"fnuiv+sn+lu7camyr4BJctHKECLvv1nFSms9ON1B2uqEhBxTPJZqyjbx6eogX3GWOnythbcWvuM1O62a",
	"tmq6+2p68wKu9Ha+bwb863niatdbkrUsOdJV/nPKQuV+KYhlCeCKWj1pZS482LKMb3llkV2sl/KSo81P",
	"BaixuMoq+vZUSV9C3YVfNQMuPdNpoNJtl8vatqrvqp/YD1MEtXsVT+U4fZsSoGep96kb9KkWj5wHLDKy",
	"5omuY3SdObVw1cLVS1fhPh80OupQtTZp5/Gt16W2kNwoJJtlDils5R79c1YSllzbvHRNaprtusoccLCg",
	"hN8Pheus1niEEcV0sOCz/NvHhEZITOT//30lGJO9hbrL1pyTGedz+CQGJvEkSY/oUSC3IawDXI2ze+OY",
	"/SQudVgwu0P0IT8ZMXpYMKgOetCcpDUrDIhuHuSYRuz3iQjiSJAyw/rdborrY9zFcZdEc0rk6RAnXMUt",
	"V4PjX8+uwMn5EAwuzkSchClTxHodX3CQzHGM5kSEqR2/0xN7JuIzKa7uba87wyjkswfxdeo64/9FtgOa",
	"LGRtn9htZWR+JmK1T5j/2ftFjyBWUOXV5OD7vl+qc0DzeUgCeXf3b6b2BRX3LIuKHOl+uVJFVn//VenF",
	"IpI6ZvHO0VRG0GrK8EZ0FiKY00QoFes+6k9n46duFrY5pTIIwxQgHBK50ANepMN9kYMJyVMUYY6pygSW",
	"IUn2Vr9hIPIK4rNcszLmoGkrKg+Ti9GyK4uMPvQTn78usDTGlIJqygfLUKBnAEfP5cq5qABGHupIDVWz",
	"i1yhRqvn+wXkWokBlc8V9qUwHn9doLCCGY021/jrDVxLlmUiIfkHL6EhumxGRWOta3DRZHG/BJRXJZtW",
	"9broyrZKwjtUOt/cZONXNFuXE1RnJ1a+cWOLcVGuMR6b8OZmVPCJ62ZbcL6rZpo5zZX09ENn6iipLpuT",
	"KP9UE0xlfEzBHeEzsOCBdAUZR9G8goNSvv16yjcTrsVJiBnbhpGwKUZSkch12EYwuFnJbMlPuDU/6e9w",
	"NleaNMe/vdZkvGyqNhkrIW9aLBsulCEc3LB0tuVoY91RRzabo03hyGdjrSlxsa7KFJkIeaOiWHNpygLB",
	"TUpkK1621ZHN0aV4fritlmyMLCU2Qt6sODZanO0xpUIq23Gzvq4kdIwpGN1nEVQFIdnv5/trHUS5HfDB",
	"8Fi6zsPjlXzgjPYKdOPGiZo/BF9C3DjDb5aHmoAypS26NEvUvLxksfOezbLgeNZWDRul3s/DivEr2VV4",
	"Sbs3y0z597l1nBT6PgcbK0qk2HkTRm6eMW/pLEesyFx68NA/fOGM6XnCwcdkEctHNL7z91+Y/M9oDD4h",
	"ju90cUueuR2EIZhiDhgOccDTqkwjh6sqQJ88OHceFMvf4OWPMcIAgRjfuVO2ou9u5WxvVGfM+M/J+L5Z",
	"bcwO1x3r8VA4XrdYfrIsZf/5LMXF3yAI8FxgkzQW/zto66Valh2w1kP/wwuTP07iSUhUncYuYYW0dZeZ",
	"l7Bi6WlP91H8ORs/KTyRP1O2kOVEPTQLubFEtVahyRc5/I6cA+XPy3LQeEg5XRO0ngkdVlORFh52czMv",
	"m4y1hzuPWD9hvvYR6xszMP9lt9/WSy0ptlBRBBiJp3ltmu2guh+toR6qofMwKAb4G2GcxNMKH1X0frta",
	"/5y+sFyeGmdYLVHrDLe73Yru6BLD3tgr7VLMeEKVus0rHkAjewBBl8T65Fkq8mjB1cOR4oQDPVDpDSls",
	"rchYgc5lylLr074Bn3aXzGxrVd/CDinTD1eorA1UT1JY23O9pJq5tlDwpQsFlxYJxttUCC6rDoy/T2lg",
	"kw+pa+sJ33w9YVvq1pa6taVubalbW+rWlrq1pW5tqVtb6rYr5WZtyVNb8vRKjqoqHtPbnldtUFUlpWcm",
	"w1SKbE8+Irm+uCpPpm2SNt6lPNcPcmJVfuOFY+XNtxF8lyou11Pj26OrH+foyjJsJy6snSrvPsqH/K5a",
	"WVUDLavUVylwuVQUXynGeDUvIqkiQzOJtAdgLVY0VtS1HC9qCrzU2xg2PCdrTfx5TNx/aX+gddTrCstS",
	"G6ny0evqy+q89OUlZa2ZNWxmzxsVVFWyFcMCpS8vGRW0G/1rqWdjK+33W8QHXeMVcHXAdqnfmCzvt5kj",
	"sfhMm4C9y+zVcy367Sr6Ga8wdMEf1cj3HSp5W+j74aEvhZp6kHkGIFy12LeBTGyGda+6mvetJk1aey7V",
	"DK/gwhjPl5UGYD5Z9vpGvmNOPojOZR5VT3ld0NB4tOs4Zh00J8W3pMCnm6f/BgAA//+4VjeLGJcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
